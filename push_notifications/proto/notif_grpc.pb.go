// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.0--rc2
// source: notif.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotifServiceClient is the client API for NotifService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotifServiceClient interface {
	GetFruitInfo(ctx context.Context, in *FruitRequest, opts ...grpc.CallOption) (NotifService_GetFruitInfoClient, error)
	GetPoetryInfo(ctx context.Context, in *PoetryRequest, opts ...grpc.CallOption) (NotifService_GetPoetryInfoClient, error)
}

type notifServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotifServiceClient(cc grpc.ClientConnInterface) NotifServiceClient {
	return &notifServiceClient{cc}
}

func (c *notifServiceClient) GetFruitInfo(ctx context.Context, in *FruitRequest, opts ...grpc.CallOption) (NotifService_GetFruitInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &NotifService_ServiceDesc.Streams[0], "/notif.NotifService/GetFruitInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &notifServiceGetFruitInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NotifService_GetFruitInfoClient interface {
	Recv() (*FruitResponse, error)
	grpc.ClientStream
}

type notifServiceGetFruitInfoClient struct {
	grpc.ClientStream
}

func (x *notifServiceGetFruitInfoClient) Recv() (*FruitResponse, error) {
	m := new(FruitResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *notifServiceClient) GetPoetryInfo(ctx context.Context, in *PoetryRequest, opts ...grpc.CallOption) (NotifService_GetPoetryInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &NotifService_ServiceDesc.Streams[1], "/notif.NotifService/GetPoetryInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &notifServiceGetPoetryInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NotifService_GetPoetryInfoClient interface {
	Recv() (*PoetryResponse, error)
	grpc.ClientStream
}

type notifServiceGetPoetryInfoClient struct {
	grpc.ClientStream
}

func (x *notifServiceGetPoetryInfoClient) Recv() (*PoetryResponse, error) {
	m := new(PoetryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NotifServiceServer is the server API for NotifService service.
// All implementations must embed UnimplementedNotifServiceServer
// for forward compatibility
type NotifServiceServer interface {
	GetFruitInfo(*FruitRequest, NotifService_GetFruitInfoServer) error
	GetPoetryInfo(*PoetryRequest, NotifService_GetPoetryInfoServer) error
	mustEmbedUnimplementedNotifServiceServer()
}

// UnimplementedNotifServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNotifServiceServer struct {
}

func (UnimplementedNotifServiceServer) GetFruitInfo(*FruitRequest, NotifService_GetFruitInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFruitInfo not implemented")
}
func (UnimplementedNotifServiceServer) GetPoetryInfo(*PoetryRequest, NotifService_GetPoetryInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPoetryInfo not implemented")
}
func (UnimplementedNotifServiceServer) mustEmbedUnimplementedNotifServiceServer() {}

// UnsafeNotifServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotifServiceServer will
// result in compilation errors.
type UnsafeNotifServiceServer interface {
	mustEmbedUnimplementedNotifServiceServer()
}

func RegisterNotifServiceServer(s grpc.ServiceRegistrar, srv NotifServiceServer) {
	s.RegisterService(&NotifService_ServiceDesc, srv)
}

func _NotifService_GetFruitInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FruitRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotifServiceServer).GetFruitInfo(m, &notifServiceGetFruitInfoServer{stream})
}

type NotifService_GetFruitInfoServer interface {
	Send(*FruitResponse) error
	grpc.ServerStream
}

type notifServiceGetFruitInfoServer struct {
	grpc.ServerStream
}

func (x *notifServiceGetFruitInfoServer) Send(m *FruitResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NotifService_GetPoetryInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PoetryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotifServiceServer).GetPoetryInfo(m, &notifServiceGetPoetryInfoServer{stream})
}

type NotifService_GetPoetryInfoServer interface {
	Send(*PoetryResponse) error
	grpc.ServerStream
}

type notifServiceGetPoetryInfoServer struct {
	grpc.ServerStream
}

func (x *notifServiceGetPoetryInfoServer) Send(m *PoetryResponse) error {
	return x.ServerStream.SendMsg(m)
}

// NotifService_ServiceDesc is the grpc.ServiceDesc for NotifService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotifService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notif.NotifService",
	HandlerType: (*NotifServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFruitInfo",
			Handler:       _NotifService_GetFruitInfo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPoetryInfo",
			Handler:       _NotifService_GetPoetryInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "notif.proto",
}
